// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // データベースプロバイダとしてPostgreSQLを使用することを指定
  url      = env("DATABASE_URL") // データベース接続用のURL
  // url       = env("POSTGRES_PRISMA_URL") // データベース接続用のURL
  // directUrl = env("POSTGRES_URL_NON_POOLING") // 直接データベースを接続する際に使用するURL
}

generator erd {
  provider = "prisma-erd-generator"
}

model Tenant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  subdomain String @unique

  account         Account[]
  employeeAccount EmployeeAccount[]
  userAccount     UserAccount[]
  employee        Employee[]
  user            User[]
  shift           Shift[]
  shiftAssignment ShiftAssignment[]
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // email        String @unique /// TODO: 認証機能をつけるときに検討する
  // passwordHash String /// TODO: 認証機能をつけるときに検討する

  tenantId        String
  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  employeeAccount EmployeeAccount?
  userAccount     UserAccount?
}

model EmployeeAccount {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  accountId String    @unique
  account   Account   @relation(fields: [accountId], references: [id])
  employee  Employee?
}

model UserAccount {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId  String
  tenant    Tenant  @relation(fields: [tenantId], references: [id])
  accountId String  @unique
  account   Account @relation(fields: [accountId], references: [id])
  user      User?
}

model Employee {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                String
  kana                String
  gender              String
  color               String
  hireDate            DateTime
  contractEndDate     DateTime?
  jobType             String
  division1           String?
  division2           String?
  qualification       String?
  payment             Float
  carDriving          Boolean
  move1hour           Boolean
  multipleAssignments Boolean
  postalCode          String
  address             String
  addressDetail       String?
  phone               String
  email               String    @unique
  comment             String?

  tenantId          String
  tenant            Tenant            @relation(fields: [tenantId], references: [id])
  employeeAccountId String            @unique
  employeeAccount   EmployeeAccount   @relation(fields: [employeeAccountId], references: [id])
  shiftAssignment   ShiftAssignment[]
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  kana          String
  birthday      DateTime
  gender        String
  postalCode    String
  address       String
  addressDetail String?
  email         String   @unique
  phone         String
  careLevel     String
  comment       String?
  isDeleted     Boolean  @default(false)

  tenantId      String
  tenant        Tenant      @relation(fields: [tenantId], references: [id])
  userAccountId String      @unique
  userAccount   UserAccount @relation(fields: [userAccountId], references: [id])
  Shift         Shift[]
}

model Shift {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  date            DateTime @default(now())
  startTime       DateTime
  endTime         DateTime
  support_content String
  comment         String?

  tenantId    String
  tenant      Tenant            @relation(fields: [tenantId], references: [id])
  userId      String?
  User        User?             @relation(fields: [userId], references: [id])
  assignments ShiftAssignment[]
}

model ShiftAssignment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startTime DateTime
  endTime   DateTime

  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  shiftId    String
  shift      Shift    @relation(fields: [shiftId], references: [id])
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
}
